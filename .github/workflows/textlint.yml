name: Scenario Quality Check with textlint

on:
  pull_request:
    paths:
      - 'negaboku-bevy/assets/scenarios/**/*.md'
      - '.textlintrc.json'
      - 'package.json'
      - 'textlint-rules/**/*.js'
  push:
    branches:
      - main
    paths:
      - 'negaboku-bevy/assets/scenarios/**/*.md'
      - '.textlintrc.json'
      - 'package.json'
      - 'textlint-rules/**/*.js'

jobs:
  textlint:
    name: シナリオ品質チェック
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run textlint check
        id: textlint
        run: |
          echo "Running textlint on scenario files..."
          npm run textlint:check > textlint-results.txt 2>&1 || echo "TEXTLINT_FAILED=true" >> $GITHUB_ENV
          cat textlint-results.txt
        continue-on-error: true

      - name: Count errors and warnings
        id: count-issues
        run: |
          if [ -f textlint-results.txt ]; then
            ERROR_COUNT=$(grep -E "✖ [0-9]+ problems" textlint-results.txt | grep -oE "[0-9]+ errors" | grep -oE "[0-9]+" || echo "0")
            WARNING_COUNT=$(grep -E "✖ [0-9]+ problems" textlint-results.txt | grep -oE "[0-9]+ warnings" | grep -oE "[0-9]+" || echo "0")
            FIXABLE_COUNT=$(grep -E "✓ [0-9]+ fixable problems" textlint-results.txt | grep -oE "[0-9]+" || echo "0")
            echo "ERROR_COUNT=${ERROR_COUNT}" >> $GITHUB_ENV
            echo "WARNING_COUNT=${WARNING_COUNT}" >> $GITHUB_ENV
            echo "FIXABLE_COUNT=${FIXABLE_COUNT}" >> $GITHUB_ENV
            echo "エラー数: ${ERROR_COUNT}, 警告数: ${WARNING_COUNT}, 自動修正可能: ${FIXABLE_COUNT}"
          else
            echo "ERROR_COUNT=0" >> $GITHUB_ENV
            echo "WARNING_COUNT=0" >> $GITHUB_ENV
            echo "FIXABLE_COUNT=0" >> $GITHUB_ENV
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let resultsContent = '';
            if (fs.existsSync('textlint-results.txt')) {
              resultsContent = fs.readFileSync('textlint-results.txt', 'utf8');
            }

            const errorCount = process.env.ERROR_COUNT || '0';
            const warningCount = process.env.WARNING_COUNT || '0';
            const fixableCount = process.env.FIXABLE_COUNT || '0';

            let status = '✅ **品質チェック完了**';
            let summary = 'シナリオファイルの品質チェックが完了しました。問題は見つかりませんでした。';

            if (parseInt(errorCount) > 0) {
              status = '❌ **品質チェック失敗**';
              summary = `シナリオファイルに${errorCount}個のエラーが見つかりました。修正が必要です。`;
            } else if (parseInt(warningCount) > 0) {
              status = '⚠️ **品質チェック警告**';
              summary = `シナリオファイルに${warningCount}個の警告が見つかりました。`;
            }

            let comment = `## ${status}

            ${summary}

            ### 📊 チェック結果サマリー
            - **エラー**: ${errorCount}件
            - **警告**: ${warningCount}件
            - **自動修正可能**: ${fixableCount}件

            ### 🔧 修正方法
            `;

            if (parseInt(fixableCount) > 0) {
              comment += `
            **自動修正可能な問題があります:**
            \`\`\`bash
            npm run textlint:fix
            \`\`\`
            `;
            }

            comment += `
            **手動チェック:**
            \`\`\`bash
            npm run textlint:check
            \`\`\`
            `;

            if (resultsContent && resultsContent.trim()) {
              comment += `
            ### 📝 詳細結果
            <details>
            <summary>textlint実行結果を表示</summary>

            \`\`\`
            ${resultsContent.substring(0, 4000)}${resultsContent.length > 4000 ? '\n... (truncated)' : ''}
            \`\`\`

            </details>
            `;
            }

            comment += `

            ---
            🤖 Generated with [Claude Code](https://claude.ai/code) - Scenario Quality Management System
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail job if errors found
        if: env.TEXTLINT_FAILED == 'true'
        run: |
          echo "❌ textlint found ${ERROR_COUNT} errors in scenario files"
          echo "Please fix the errors before merging."
          exit 1

      - name: Success summary
        if: env.TEXTLINT_FAILED != 'true'
        run: |
          echo "✅ シナリオ品質チェック完了"
          echo "エラー: ${ERROR_COUNT}件, 警告: ${WARNING_COUNT}件, 自動修正可能: ${FIXABLE_COUNT}件"
